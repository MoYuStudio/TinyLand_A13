[gd_scene load_steps=4 format=3 uid="uid://cjjxpcc0lohca"]

[sub_resource type="Shader" id="Shader_7d65s"]
code = "
shader_type spatial;

// Water color
uniform vec4 out_color: source_color = vec4(0.0, 0.2, 1.0, 0.8);//0.0, 0.2, 1.0, 1.0
// Amount of height for each triangle
uniform float amount: hint_range(0.2, 5.0, 0.1) = 0.8;
// The speed of the trangles height change
uniform float speed: hint_range(0.1, 5.0, 0.1) = 1;
// Beer factor (used to calculate how transparent the water is going to be) if equals to 0.0 then the alpha is going to be the out_color's alpha
uniform float beer_factor = 0;//0.2
uniform float metallic = 0.6;
uniform float specular = 1;//0.5
uniform float roughness = 0;//0.2

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture;// filter_linear_mipmaps

float generateOffset(float x, float z, float val1, float val2, float time) {
	float radiansX = ((mod(x + z * x * val1, amount) / amount) + (time * speed) * mod(x * 0.8 + z, 1.5)) * 2.0 * 3.14;
	float radiansZ = ((mod(val2 * (z * x + x * z), amount) / amount) + (time * speed) * 2.0 * mod(x, 2.0)) * 2.0 * 3.14;
	
	return amount * 0.5 * (sin(radiansZ) * cos(radiansX));
}

vec3 applyDistortion(vec3 vertex, float time) {
	float xd = generateOffset(vertex.x, vertex.z, 0.2, 0.1, time);
	float yd = generateOffset(vertex.x, vertex.z, 0.1, 0.3, time);
	float zd = generateOffset(vertex.x, vertex.z, 0.15, 0.2, time);
	
	return vertex + vec3(xd, yd, zd);
}

void vertex() {
	VERTEX = applyDistortion(VERTEX, TIME * 0.1);
}

void fragment() {
	NORMAL = normalize(cross(dFdx(VERTEX), dFdy(VERTEX)));
	METALLIC = metallic;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	ALBEDO = out_color.rgb;
	
	if (beer_factor != 0.0) {
		float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;//DEPTH_TEXTURE

		depth = depth * 2.0 - 1.0;
		depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
		depth = depth + VERTEX.z;

		depth = exp(-depth * beer_factor);
		ALPHA = clamp(30.0 - depth, 0.0, 1.0);;//clamp(1.0 - depth, 0.0, 1.0);
	} else {
		ALPHA = out_color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pxl73"]
render_priority = 0
shader = SubResource("Shader_7d65s")
shader_parameter/out_color = Color(0, 0.2, 1, 0.8)
shader_parameter/amount = 0.2
shader_parameter/speed = 0.6
shader_parameter/beer_factor = 0.0
shader_parameter/metallic = 0.6
shader_parameter/specular = 1.0
shader_parameter/roughness = 0.0

[sub_resource type="PlaneMesh" id="PlaneMesh_6og20"]
material = SubResource("ShaderMaterial_pxl73")
size = Vector2(16, 16)
subdivide_width = 16
subdivide_depth = 16

[node name="Water" type="MeshInstance3D"]
gi_mode = 2
mesh = SubResource("PlaneMesh_6og20")
