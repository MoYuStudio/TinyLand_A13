[gd_scene load_steps=3 format=3 uid="uid://gl3daikwgbaj"]

[ext_resource type="MeshLibrary" uid="uid://co2fihrhl0fs4" path="res://resource/bit_resource/mesh_library/main_mesh_library.tres" id="1_ppwsa"]

[sub_resource type="GDScript" id="GDScript_i6g6p"]
script/source = "
extends GridMap

var 生成边界 = 128

var 噪声
var 噪声类型 = 3
var 噪声种子 = randi_range(0,999999999)
var 噪声频率 = 0.1

var 树林噪声
var 树林噪声类型 = 3
var 树林噪声种子 = randi_range(0,999999999)
var 树林噪声频率 = 0.3

var 碰撞点
var 碰撞类型

func _ready():
	噪声 = FastNoiseLite.new()
	噪声.noise_type = 噪声类型
	噪声.seed = 噪声种子
	噪声.frequency = 噪声频率
	
	树林噪声 = FastNoiseLite.new()
	树林噪声.noise_type = 树林噪声类型
	树林噪声.seed = 树林噪声种子
	树林噪声.frequency = 树林噪声频率
	
	for x in range(-生成边界,生成边界):
		for z in range(-生成边界/3.5,生成边界/3.5):
			var 瓷砖类型 = 噪声.get_noise_2d(x/3.5,z)*1000
			瓷砖类型 = int(瓷砖类型)
			var 六边形生成错位 = (x % 2)*2
			var 生成概率 = randi_range(0,100)
			var 生成方向 = randi_range(0,1)
			# 生成方向 [0,10]
			if 生成方向 == 1:
				生成方向 = 10
			
			if 0 <= 瓷砖类型 and 瓷砖类型 < 20:
				if 0 <= 生成概率 and 生成概率 < 90:
					set_cell_item(Vector3(x,0,z*4+六边形生成错位),2,生成方向) # 沙滩
				if 90 <= 生成概率 and 生成概率 < 101:
					set_cell_item(Vector3(x,0,z*4+六边形生成错位),8,生成方向) # 沙滩石头
			if 20 <= 瓷砖类型 and 瓷砖类型 < 270:
				var 树林瓷砖类型 = 树林噪声.get_noise_2d(x/3.5,z)*1000
				if -1000 <= 树林瓷砖类型 and 树林瓷砖类型 < 0:
					set_cell_item(Vector3(x,0,z*4+六边形生成错位),1,生成方向) # 草地
				if 0 <= 树林瓷砖类型 and 树林瓷砖类型 < 1000:
					set_cell_item(Vector3(x,0,z*4+六边形生成错位),6,生成方向) # 树林
			if 270 <= 瓷砖类型 and 瓷砖类型 < 300:
				if 0 <= 生成概率 and 生成概率 < 30:
					set_cell_item(Vector3(x,0,z*4+六边形生成错位),0,生成方向) # 戈壁沙土
				if 30 <= 生成概率 and 生成概率 < 101:
					set_cell_item(Vector3(x,0,z*4+六边形生成错位),5,生成方向) # 戈壁树林
			if 300 <= 瓷砖类型 and 瓷砖类型 < 320:
				set_cell_item(Vector3(x,0,z*4+六边形生成错位),3,生成方向) # 戈壁
			if 320 <= 瓷砖类型 and 瓷砖类型 < 370:
				set_cell_item(Vector3(x,0,z*4+六边形生成错位),9,生成方向) # 戈壁小石头
			if 370 <= 瓷砖类型 and 瓷砖类型 < 470:
				set_cell_item(Vector3(x,0,z*4+六边形生成错位),10,生成方向) # 戈壁中石头
			if 470 <= 瓷砖类型 and 瓷砖类型 < 1000:
				set_cell_item(Vector3(x,0,z*4+六边形生成错位),11,生成方向) # 戈壁大石头

func _on_camera_click_pos(碰撞点位置):
	print(碰撞点位置)
	var 碰撞点 = local_to_map(碰撞点位置)
	set_cell_item(Vector3(碰撞点.x,0,碰撞点.z),-1,0)
"

[node name="HexGridMap" type="GridMap"]
mesh_library = ExtResource("1_ppwsa")
cell_size = Vector3(0.49, 1, 0.43)
collision_mask = 3
script = SubResource("GDScript_i6g6p")
